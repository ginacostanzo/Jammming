{"ast":null,"code":"let accessToken;\nconst clientID = '196af1492fa14bb2abfffd8b730f6647';\nconst redirectURI = \"http://localhost:3000/\";\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch;\n      const expiresIn = expiresInMatch;\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      } else {\n        return jsonResponse.tracks.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      }\n    });\n  },\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return;\n    }\n    accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userID;\n\n    //get current user's ID\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userID = jsonResponse.id;\n      return this.fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        let playlistID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks\n                `, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["accessToken","clientID","redirectURI","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","map","track","id","name","artist","artists","album","uri","savePlaylist","trackURIs","length","userID","method","body","JSON","stringify","playlistID","uris"],"sources":["/Users/ginacostanzo/Coding/Codecademy/Jammming/src/util/Spotify.js"],"sourcesContent":["let accessToken;\n\nconst clientID = '196af1492fa14bb2abfffd8b730f6647';\nconst redirectURI = \"http://localhost:3000/\";\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        \n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch;\n            const expiresIn = expiresInMatch;\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \n        {\n            headers: {Authorization: `Bearer ${accessToken}`}\n        }).then(response => response.json()\n        ).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            } else {\n                return jsonResponse.tracks.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }));\n            }\n        })\n    },\n\n    savePlaylist(name, trackURIs) {\n        if (!name || !trackURIs.length) {\n            return;\n        }\n\n        accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let userID;\n        \n        //get current user's ID\n        return fetch('https://api.spotify.com/v1/me', {\n            headers: headers\n        }).then(response => response.json()\n        ).then(jsonResponse => {\n            userID = jsonResponse.id;\n            return this.fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n            {\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                let playlistID = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks\n                `, \n                {\n                    method: 'POST',\n                    headers: headers,\n                    body: JSON.stringify({ uris: trackURIs })\n                });\n            });\n        });\n        }\n    };\n\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}