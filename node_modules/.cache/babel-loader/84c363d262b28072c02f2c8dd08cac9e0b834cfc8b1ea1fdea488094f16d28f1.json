{"ast":null,"code":"var accessToken;var clientID='196af1492fa14bb2abfffd8b730f6647';var redirectURI=\"http://jamminggina.surge.sh\";var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=expiresInMatch[1];window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{window.location=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientID,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);}},search:function search(term){accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackURIs){if(!name||!trackURIs.length){return;}accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userID;//get current user's ID\nreturn fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userID=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userID,\"/playlists\"),{method:'POST',headers:headers,body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistID=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/playlists/\".concat(playlistID,\"/tracks\\n                \"),{method:'POST',headers:headers,body:JSON.stringify({uris:trackURIs})});});});}};export default Spotify;","map":{"version":3,"names":["accessToken","clientID","redirectURI","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","setTimeout","history","pushState","concat","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackURIs","length","userID","method","body","JSON","stringify","playlistID","uris"],"sources":["/Users/ginacostanzo/Coding/Codecademy/Jammming/src/util/Spotify.js"],"sourcesContent":["let accessToken;\n\nconst clientID = '196af1492fa14bb2abfffd8b730f6647';\nconst redirectURI = \"http://jamminggina.surge.sh\";\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        \n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = expiresInMatch[1];\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n        }\n    },\n\n    search(term) {\n        accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \n        {\n            headers: {Authorization: `Bearer ${accessToken}`}\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            } \n            return jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }));\n        })\n    },\n\n    savePlaylist(name, trackURIs) {\n        if (!name || !trackURIs.length) {\n            return;\n        }\n\n        accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let userID;\n        \n        //get current user's ID\n        return fetch('https://api.spotify.com/v1/me', {\n            headers: headers\n        }).then(response => response.json()\n        ).then(jsonResponse => {\n            userID = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n            {\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                let playlistID = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks\n                `, \n                {\n                    method: 'POST',\n                    headers: headers,\n                    body: JSON.stringify({ uris: trackURIs })\n                });\n            });\n        });\n        }\n    };\n\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}