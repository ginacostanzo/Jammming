{"ast":null,"code":"let accessToken;\nconst clientID = '196af1492fa14bb2abfffd8b730f6647';\nconst redirectURI = \"http://localhost:3000/\";\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch;\n      const expiresIn = expiresInMatch;\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response.json;\n      } else {\n        throw new Error('Request failed.');\n      }\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      } else {\n        return jsonResponse.tracks.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      }\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["accessToken","clientID","redirectURI","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","tracks","map","track","id","name","artist","artists","album","uri"],"sources":["/Users/ginacostanzo/Coding/Codecademy/Jammming/src/util/Spotify.js"],"sourcesContent":["let accessToken;\n\nconst clientID = '196af1492fa14bb2abfffd8b730f6647';\nconst redirectURI = \"http://localhost:3000/\";\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        \n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch;\n            const expiresIn = expiresInMatch;\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \n        {\n            headers: {Authorization: `Bearer ${accessToken}`}\n        }).then(response => {\n            if (response.ok) {\n                return response.json;\n            } else {\n                throw new Error('Request failed.');\n            }\n        }, networkError => console.log(networkError.message)\n        ).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            } else {\n                return jsonResponse.tracks.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }));\n            }\n        })\n    }\n\n};\n\nexport default Spotify;"],"mappings":"AAAA,IAAIA,WAAW;AAEf,MAAMC,QAAQ,GAAG,kCAAkC;AACnD,MAAMC,WAAW,GAAG,wBAAwB;AAE5C,MAAMC,OAAO,GAAG;EACZC,cAAcA,CAAA,EAAG;IACb,IAAIJ,WAAW,EAAE;MACb,OAAOA,WAAW;IACtB;IAEA,MAAMK,gBAAgB,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC;IAC3E,MAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC;IAEvE,IAAIJ,gBAAgB,IAAIK,cAAc,EAAE;MACpCV,WAAW,GAAGK,gBAAgB;MAC9B,MAAMM,SAAS,GAAGD,cAAc;MAChCJ,MAAM,CAACM,UAAU,CAAC,MAAMZ,WAAW,GAAG,EAAE,EAAEW,SAAS,GAAG,IAAI,CAAC;MAC3DL,MAAM,CAACO,OAAO,CAACC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,GAAG,CAAC;MACnD,OAAOd,WAAW;IACtB,CAAC,MAAM;MACHM,MAAM,CAACC,QAAQ,GAAI,oDAAmDN,QAAS,kEAAiEC,WAAY,EAAC;IACjK;EACJ,CAAC;EAEDa,MAAMA,CAACC,IAAI,EAAE;IACT,MAAMhB,WAAW,GAAGG,OAAO,CAACC,cAAc,EAAE;IAC5C,OAAOa,KAAK,CAAE,kDAAiDD,IAAK,EAAC,EACrE;MACIE,OAAO,EAAE;QAACC,aAAa,EAAG,UAASnB,WAAY;MAAC;IACpD,CAAC,CAAC,CAACoB,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACb,OAAOD,QAAQ,CAACE,IAAI;MACxB,CAAC,MAAM;QACH,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACtC;IACJ,CAAC,EAAEC,YAAY,IAAIC,OAAO,CAACC,GAAG,CAACF,YAAY,CAACG,OAAO,CAAC,CACnD,CAACR,IAAI,CAACS,YAAY,IAAI;MACnB,IAAI,CAACA,YAAY,CAACC,MAAM,EAAE;QACtB,OAAO,EAAE;MACb,CAAC,MAAM;QACH,OAAOD,YAAY,CAACC,MAAM,CAACC,GAAG,CAACC,KAAK,KAAK;UACrCC,EAAE,EAAED,KAAK,CAACC,EAAE;UACZC,IAAI,EAAEF,KAAK,CAACE,IAAI;UAChBC,MAAM,EAAEH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI;UAC7BG,KAAK,EAAEL,KAAK,CAACK,KAAK,CAACH,IAAI;UACvBI,GAAG,EAAEN,KAAK,CAACM;QACf,CAAC,CAAC,CAAC;MACP;IACJ,CAAC,CAAC;EACN;AAEJ,CAAC;AAED,eAAenC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}